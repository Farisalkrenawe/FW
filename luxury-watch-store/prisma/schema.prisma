// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  password      String
  name          String?
  image         String?
  role          Role      @default(USER)
  orders        Order[]
  addresses     Address[]
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String?
  image         String?
  parentId      String?
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  products      Product[]
  sortOrder     Int       @default(0)
  isActive      Boolean   @default(true)
  metaTitle     String?
  metaDescription String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([slug])
}

model Product {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String
  shortDescription String?
  sku             String    @unique
  price           Float
  comparePrice    Float?
  costPrice       Float?
  categoryId      String
  category        Category  @relation(fields: [categoryId], references: [id])
  brand           String?
  images          ProductImage[]
  variants        ProductVariant[]
  inventory       Inventory?
  featured        Boolean   @default(false)
  status          ProductStatus @default(ACTIVE)
  tags            String?
  specifications  Json?
  metaTitle       String?
  metaDescription String?
  orderItems      OrderItem[]
  reviews         Review[]
  cartItems       CartItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([slug, status])
  @@index([categoryId])
}

model ProductImage {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  altText     String?
  isPrimary   Boolean   @default(false)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
}

model ProductVariant {
  id            String    @id @default(cuid())
  productId     String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  name          String    // e.g., "Size", "Material"
  value         String    // e.g., "42mm", "Leather"
  sku           String    @unique
  price         Float?
  inventory     Inventory?
  sortOrder     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Inventory {
  id            String    @id @default(cuid())
  productId     String?   @unique
  product       Product?  @relation(fields: [productId], references: [id])
  variantId     String?   @unique
  variant       ProductVariant? @relation(fields: [variantId], references: [id])
  quantity      Int       @default(0)
  reserved      Int       @default(0)
  lowStockAlert Int       @default(5)
  updatedAt     DateTime  @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  sessionId String?
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@index([sessionId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  variantId String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([cartId, productId, variantId])
}

model Order {
  id              String    @id @default(cuid())
  orderNumber     String    @unique
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])
  email           String
  status          OrderStatus @default(PENDING)
  items           OrderItem[]
  shippingAddress Json
  billingAddress  Json
  subtotal        Float
  tax             Float
  shipping        Float
  total           Float
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?
  trackingNumber  String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([orderNumber, status])
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  variantId   String?
  quantity    Int
  price       Float
  total       Float
}

model Review {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  name        String
  email       String
  rating      Int
  title       String?
  comment     String?
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Address {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  type        AddressType @default(SHIPPING)
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}